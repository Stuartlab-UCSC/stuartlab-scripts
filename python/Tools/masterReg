#!/usr/bin/env python

"""
Implements the 'Master Regulator' analysis based on a generalized two-sided GSEA
test (see Lim, Califano, 2009). Runs a permutation test to get an empirical p-value
on each GSEA score. 

Input:
	- A network in .sif format with interactions in UCSC pathway format 
	(i.e. (-a>,-a|,-t>,-t|,-component>)). Each gene with more than --min_hub
	genes that it transcriptionally regulates (has a -t> or -t| interaction)
	will be tested, with that corresponding downstream set as the input to GSEA. 
	- A scored list of all genes in the network: typically from a differential 
	expression analysis. 

Libraries:
	master_reg.py

"""
import sys

from optparse import OptionParser
parser = OptionParser()
# data specific for patient-specific networks here
parser.add_option("-n","--network",dest="network",action="store",
        default=None,help=".sif network file for the curated pathway to search."
        " Each line should have format "
        "'<source> <(-a>,-a|,-t>,-t|,-component>)> <target>'")
parser.add_option("-d","--d_expr",dest="d_expr",action="store",default=None,
        type="string",help="List of significantly differentially expressed "
        "genes, along with log-FC or FC values (i.e. by edgeR for RNA-Seq or "
        "SAM for microarray data. Generated by a sample-dichotomy of interest")
parser.add_option("-m","--min_hub",dest="min_hub",action="store",default=10,type="int",
		help="Minimum number of downstream, transcriptionally regulated genes for a "
		"node to be considered a hub. (defaults to 10).")
parser.add_option("-p","--permute",dest="permute",action="store",default=1000,type="int",
		help="Number of permutations to perform for the background model")
(opts, args) = parser.parse_args()
	
from master_reg import ActivityScores

# build an index, source to targets fro the directed graph
def parseNet(network):
	"""
	Build a directed network from a .sif file. 
	
	Inputs:
		A network in .sif format, tab-separated (<source> <interaction> <target>)

	Returns
		A network in hash key format, i.e. convert two lines of a file:
			<source>	<interaction1>	<target1>
			<source>	<interaction2>	<target2>
		To:	
			{'source': set( (interaction, target1), (interaction, target2) )
	"""
	net = {}
	for line in open(network, 'r'):

		parts = line.rstrip().split("\t")
		source = parts[0]
		interaction = parts[1]
		target = parts[2]

		if source not in net:
			net[source] = set()

		net[source].add((interaction, target))

	return net

def getNetworkNodes(network):
	"""
	Take a network in hash-key format and return a set containing the
	nodes in it. 
	"""
	nodes = set()
	for s in network:
		nodes.add(s)
		for (i, t) in network[s]:
			nodes.add(t)
	return nodes

sys.stderr.write("Parsing Network File..\n")
network = parseNet(opts.network)
network_nodes = getNetworkNodes(network)

tfs_heats = ActivityScores.findRegulators(network, opts.d_expr, min_hub=int(opts.min_hub), nperms=opts.permute)

for node in tfs_heats:
	print node+"\t"+"\t"+str(tfs_heats[node])
