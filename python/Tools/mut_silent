#!/usr/bin/env python2.6

"""
	Evan Paull; Aug 25th, 2011
	Mut Silent
	Usage: mut_silent <gzipped seq file>

	Take a 2-column tab file mapping gene IDs to the exome. Finds the largest
	ORF, reads through one codon at a time and counts the number of single mutations
	that will change the amino acid.  
"""

import gzip, sys, string
import codon_table
from optparse import OptionParser
parser = OptionParser()
(options, args) = parser.parse_args()

if len(args) != 1:
	sys.stderr.write("Usage: mut_silent <gzipped seq file>")
	sys.exit(2)

def count_ns_mutations(codon, table):

	# can't make a call about 'N's, etc...
	if codon not in table:
		return 0

	count = 0
	aa = table[codon]
	for pos in range(0,3):
		aa = table[codon]
		for base in ('A','T','G','C'):
			
			if base == codon[pos]:
				continue
	
			str = [c for c in codon]	
			str[pos] = base
			mutated_codon = "".join(str)
			if table[mutated_codon] != aa:
				count += 1

	return count

	
lc_to_uc_TT = string.maketrans(string.ascii_lowercase, string.ascii_uppercase)

# codon_table[BBB] (M = Start, * = Stop)
codon_table = codon_table.get_ncbi_codon_table("Standard")

IN_GENE = False

def get_longest_orf(sequence, codon_table):

	# for each ORF window, record the positions of each start and stop codon 
	frames = [ { 'start_positions':[], 'stop_positions':[] } for x in range(3) ]
	for pos in range(0, len(sequence)-3, 3):

		# look at each codon, record any stop or start states 
		orf1_codon = sequence[pos:pos + 3]
		orf2_codon = sequence[pos + 1:pos + 4]
		orf3_codon = sequence[pos + 2:pos + 5]
		orf_codons = [ orf1_codon, orf2_codon, orf3_codon ]

	#	if options.debug:
		#print "looking at frames:"+orf1_codon+":"+orf2_codon+":"+orf3_codon
		#print "postion %d of sequence length %d" % (pos, len(sequence))

		# update the window for each ORF if any contains a start/stop codon
		for window in range(3):

			# at the end of the strand: skip
			if len(orf_codons[window]) < 3:
				break

			if codon_table[orf_codons[window]] == 'M':
				frames[window]['start_positions'].append( pos/3 )
			elif codon_table[orf_codons[window]] in '*':
				frames[window]['stop_positions'].append( pos/3 )
			
		# terminate the loop once we've found stops for all 3 ORFs
		#if orf1_state['found_stop'] and orf2_state['found_stop'] and orf3_state['found_stop']:
			# update the best count list, since we've just found the longest ORF

	# what if the longest ORF has no stop codon at the end?
	# in that case we're looking for the first start codon that has no
	# stop codons after it. Instead of writing a new piece of code to 
	# deal with this, I can just add a 'phantom' stop codon immediately 
	# after the real sequence and use the get_longest_orf function
	# normally
	for index in range(3):
		frames[index]['stop_positions'].append( len(sequence)/3 + 1 )

	longest_w = 0
	start = None
	stop = None
	for window in range(0,3):
		longest, x_start, x_stop = get_longest_orf_from_positions(frames[window]['start_positions'],frames[window]['stop_positions'])
		if longest > longest_w:
			longest_w, start, stop = longest, x_start*3-3, x_stop*3-3

	return (longest_w, start, stop)
 
def get_longest_orf_from_positions(start_positions, stop_positions):
	"""
		Take a list of start positions and a list of stop positions
		and return the lenth of the longest ORF
		- Warnings: start and stop positions must be sorted!
	"""
	longest = 0

	#if options.debug:
	#print "Start positions: "+str(start_positions)
	#print "Stop positions: "+str(stop_positions)

	last_stop = None
	last_start = None
	for start in start_positions:
		for stop in stop_positions:
			if stop > start:
				length = stop - start 
				if length > longest:
					longest = length 
					last_stop = stop
					last_start = start
				break
   
	return (longest, last_start, last_stop)


print "#Gene\tLongest_ORF_Length\tNon-Silent_Mutations\tSilent_Mutations"
seqs = gzip.GzipFile(args[0], 'r')
for	line in seqs:
	gene, sequence = line.split("\t")
	sequence = sequence.rstrip().translate(lc_to_uc_TT) 

	ns_mutations = 0
	s_mutations = 0

	# longest ORF from any of 3 windows
	length, start_pos, stop_pos = get_longest_orf(sequence, codon_table)
	# XXXXATGXXXTAGXX
	#    ^         ^
	for i in range(start_pos, stop_pos-3, 3):
		codon = sequence[i:i+3]
	#	print codon
		ns = count_ns_mutations(codon, codon_table)	
		ns_mutations += ns
		s_mutations += 9 - ns

	print gene+"\t"+str(length)+"\t"+str(ns_mutations)+"\t"+str(s_mutations)
